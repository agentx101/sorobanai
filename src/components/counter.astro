<br />
<br />
<br />

<h3>Step 2: Confirm Deposit and Withdraw gINR</h3>
<button data-increment aria-controls="current-value">Get gINR into your wallet!</button>
<button data-withdraw aria-controls="current-value">Get local INR in your Bank</button>

<script>
  import {Buffer} from "buffer";
  import grup from "../contracts/soroban_grupee_contract";
  import { isAllowed, getPublicKey, signTransaction } from '@stellar/freighter-api';

//   soroban contract invoke \
//   --id CDWMGTUQRSEG2MLZE75CBLZGIP2T2CMEKR4NATOAGIFXLBS44N2NGS5A \
//   --network testnet \
//   --source vaibhav \
//   -- \
//   withdraw \
//   --contributor vaibhav \
//   --recipient vaibhav \
//   --token CDLZFC3SYJYDZT7K67VZ75HPJVIEUVNIXF47ZG2FB2RMQQVU2HHGCYSC

  const withdraw = document.querySelector("[data-withdraw]");
  withdraw?.addEventListener("click", async () => {
    withdraw.disabled = true;
    withdraw.classList.add("loading");
    
    console.log(Buffer.from("1d7515989335d6974948a295e76509ad5625bf168f2e69a0d7b9cc7b41c6cb43", "hex"))
    //const tx = await grup.initialize({"admin": "GCU7KB2T5FV23DY6YZRDLWCKX7MQ5U45LWPZTFG3ESIO6BHOTMLQNZAH" ,"token_wasm_hash": Buffer.from("1d7515989335d6974948a295e76509ad5625bf168f2e69a0d7b9cc7b41c6cb43", "hex"),"token": "CDLZFC3SYJYDZT7K67VZ75HPJVIEUVNIXF47ZG2FB2RMQQVU2HHGCYSC"});
    const tx = await grup.withdraw({"contributor": await getPublicKey(), "recipient": await getPublicKey(), "token": "CDLZFC3SYJYDZT7K67VZ75HPJVIEUVNIXF47ZG2FB2RMQQVU2HHGCYSC"})
    const { result } = await tx.signAndSend({signTransaction});
    console.log('result', result)

    withdraw.disabled = false;
    withdraw.classList.remove("loading");
  });


  const button = document.querySelector("[data-increment]");
  const currentValue = document.querySelector("#current-value");
  if (await isAllowed()) {
    const publicKey = await getPublicKey();
    if (publicKey) grup.options.publicKey = publicKey;
  }
  button?.addEventListener("click", async () => {
    button.disabled = true;
    button.classList.add("loading");
    
    console.log(Buffer.from("1d7515989335d6974948a295e76509ad5625bf168f2e69a0d7b9cc7b41c6cb43", "hex"))
    //const tx = await grup.initialize({"admin": "GCU7KB2T5FV23DY6YZRDLWCKX7MQ5U45LWPZTFG3ESIO6BHOTMLQNZAH" ,"token_wasm_hash": Buffer.from("1d7515989335d6974948a295e76509ad5625bf168f2e69a0d7b9cc7b41c6cb43", "hex"),"token": "CDLZFC3SYJYDZT7K67VZ75HPJVIEUVNIXF47ZG2FB2RMQQVU2HHGCYSC"});
    const getAddress = await grup.get_share_token();
    console.log("share address", getAddress.result)
    
    const tx = await grup.deposit({"contributor": await getPublicKey(), "token": "CDLZFC3SYJYDZT7K67VZ75HPJVIEUVNIXF47ZG2FB2RMQQVU2HHGCYSC", "amount": BigInt(100000000), "exchange_price": BigInt(83)})
    const { result } = await tx.signAndSend({signTransaction});
    console.log('result', result)
    // Only use `innerHTML` with contract values you trust!
    // Blindly using values from an untrusted contract opens your users to script injection attacks!
    

    button.disabled = false;
    button.classList.remove("loading");
  });
</script>